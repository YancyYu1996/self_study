前情回顾
1.创建进程：os.fork
    *fork()的执行流程
    *父子进程的执行特征
2.进程函数
    os.getpid()
    os.getppid()
    os._exit(0)
    sys.exit()
3.孤儿和僵尸
    *避免僵尸进程产生
    1.wait waitpid回收
    2.二级子进程执行事件
    3.使用signal信号处理

4.聊天室
    确定需求 -> 总结使用的技术和技术点分析 -> 整体结构设计
    -> 功能分析 ->代码实现 -> 基本测试
**********************************************************
1.聊天室（续）
    1.聊天
        *客户端：创建子进程
                发送进程循环input  ->sendto
                接受进程循环 recvfrom
        *服务端：*接收消息，判断消息类型
                *将消息转发给其他人
        
    2.退出
        客户端：输入quit表示退出
               退出进程
        服务器：判断消息类型
              通知其他人，给用户发送“##”
              将用户从字典删除
    3.管理员公告

二.multiprocessing 模块使用
    1.创建流程
        *将需要子进程处理的事件封装为函数
        *通过process类创建进程对象，关联函数
        *可以通过进程的对象对进程进行属性设置
        *通过start启动进程
        *通过join回收进程

    2.接口使用
        【1】Process()
            功能：创建进程对象
            参数：target绑定要执行的目标函数
                 args 元祖给target函数位置传参
                 kwargs  字典 给target函数关键字传参
        【2】p.start()
            功能：启动进程
            *此时进程产生，将p绑定函数作为新进程的执行内容。
        【3】p.join(【timeout】)
            功能：阻塞等待回收进程
            参数：超时时间
        * multiprocessing创建进程同样是复制父进程的空间代码，父子进程运行互不影响。
        * 子进程值执行target绑定函数，其余均由父进程执行 
        * Process创建进程中，往往父进程只是用来创建和回收进程，具体事件由子进程完成。
        * multiprocessing创建的子进程中不能使用标准输入
    
    3.进程对象属性
        p.name   进程名称
        p.pid    进程pid号
        p.is_alive()  进程是否在生命周期。
        p.daemon 设置父子进程的退出关系
            * 将该属性设置为True则父进程退出，其子进程也会退出
            * 要求必须在start()前设置
            * 不会和join一起使用
    
    4.自定义进程类
        编写流程：
        【1】定义进程类继承Process
        【2】编写自己的__init__函数添加属性，super重新加载父类__init__方法
        【3】重写Process中run方法

        使用：
        【1】使用自定义类实例化对象
        【2】通过对象调用start()创建进程，自动运行run
        【3】通过join回收进程

三.进程池技术
    1.必要性
        * 进程的创建和销毁过程消耗的计算机资源较多
        * 当任务量众多，每个任务又比较小的时候，需要频繁创建销毁进程，对计算机压力较大
        * 进程池技术很好的解决了上述问题
    2.原理：创建一定数量的进程来处理事件。事件处理完进程不退出而是继续处理其他事件，
        直到所有的事件都处理完毕再一同销毁。增加进程的复用性，降低资源消耗。
    3.进程池实现
        from multiprocessing import Pool
        Pool(processes)
        功能：创建进程池对象
        参数：指定创建进程数量，默认是根据系统自动判定

        pool.apply_async(func,args,kwds):
        功能：将进程事件加入进程池
        参数：func进程事件函数
            args 给进程事件元祖传参
            kwds 给进程事件字典传参
        
        pool.close()
        功能:关闭进程池
        pool.join()
        功能：回收进程池

四.进程间的通信(IPC)
    1.必要性：进程空间独立，资源不共享，此时在进程间数据传输时，需要一定的方法手段
    2.进程间通信方法：
    管道  消息队列  共享内存  信号  信号量  套接字
    3.管道通信
        【1】通信原理：在内存中开辟管道空间，生成管道对象，
            多个进程使用同一个管道进行读写操作
        【2】实现方法
            from multiprocessing import Pipe
            fd1,fd2 = Pipe(duplex = True)
            功能：创建管道
            参数：默认双向管道，False表示单向管道
            返回值：表示管道的两端读写对象
                   如果双向管道均可读写
                   单向管道fd1只读，fd2只写
            fd.recv()
            功能：从管道读取内容
            返回值：读取到的内容

            fd.send(data)
            功能：向管道内写入内容
            参数：要写入的数据

作业：1.使用multiprocessing创建两个子进程，
分别复制一个文件的上下两个部分到一个新的文件中。
     2.将聊天室代码梳理思路流程
     3.SQL语句 pymsql

