正则表达式
一.动机
    1.文本处理已经称为计算机常见工作之一
    2.对文本内容的搜索,定位,提取是逻辑比较复杂的
    3.为了快速解决上述问题,产生了正则表达式

二.简介
    定义:即文本的高级匹配模式,提供搜索,替换等功能.其本质是一系列字符和
    特殊符号构成的字符串,这个字符串即正则表达式.
    原理:通过特殊符号去描述字符的组成规则,比如重复,位置等,来表达一类字符串,进而匹配.

三.元字符的使用
    1.普通字符
        匹配规则:每个普通字符匹配其对应的字符
        In [9]: re.findall("as","asdas")
        Out[9]: ['as', 'as']
        注意:可以匹配utf-8字符
    2.或
        元字符: |
        匹配规则: 匹配|两侧任意正则表达式规则
    3.匹配单个字符
        元字符: .
        匹配规则:匹配除换行外任意一个字符
        In [20]: re.findall("a.d","asdas")
        Out[20]: ['asd']

    4.匹配字符集
        元字符:[字符集]
        匹配规则: 匹配字符集中的任意一个字符
        表达形式: [abc#!好] --> 匹配其中任意一个
                 [0-9][a-z][A-Z] 匹配区间中任意一个
                 [#?0-9a-z] 混合书写,区间写后面

        In [26]: re.findall("[aei0-9a-z]","Hello World")
        Out[26]: ['e', 'l', 'l', 'o', 'o', 'r', 'l', 'd']

    5.匹配字符集取反
        元字符 :[^字符集]
        匹配规则: 匹配除了字符集以外的任意一个字符
        In [28]: re.findall("[^j-z]","Hello World")
        Out[28]: ['H', 'e', ' ', 'W', 'd']

    6.匹配字符串开始位置
        元字符:^
        匹配规则:匹配字符串的开始位置
        In [37]: re.findall("^Hi.","Hi,Jame")
        Out[37]: ['Hi,']

    7.匹配字符串结束位置
        元字符:$
        匹配规则:匹配目标字符串的结尾位置
        In [45]: re.findall("Jame$","Hi,Jame")
        Out[45]: ['Jame']


        使用技巧:^和$表示开头结尾位置,这两个元字符一定在正则表达式开始和结尾处.
    8.匹配字符重复
        元字符: *
        匹配规则:匹配前面的字符出现0次或多次
        In [46]: re.findall("wo*","wooooo~~w!")
        Out[46]: ['wooooo','w']

        元字符: +
        匹配规则:
        In [50]: re.findall("e+","HieJameeeeee")
        Out[50]: ['e', 'eeeeee']

        元字符:?
        匹配规则: 匹配前面的字符出现0次或1次
        In [6]: re.findall('-?[0-9]+',"age:20,score:-23")
        Out[6]: ['20', '-23']

        元字符: {n}
        匹配规则: 匹配前面的字符出现n次
        In [2]: re.findall('1[0-9]{10}',"tel:18771045653")
        Out[2]: ['18771045653']

        元字符: {m, n}
        匹配规则: 匹配前面的字符出现m-n次
        In [4]: re.findall('[1-9][0-9]{5,10}',"qq:1191500820,qq:34324523")
        Out[4]: ['1191500820', '34324523']

    9.匹配任意(非)数字字符
        元字符: \的 \D
        匹配规则 : \d 匹配任意数字字符 [0-9]
                  \D 匹配任意非数字字符 [^0-9]
        In [7]: re.findall('\d{1,5}',"mysql:3306,mongo:27017")
        Out[7]: ['3306', '27017']

        In [8]: re.findall('\D+',"mysql:3306,mongo:27017")
        Out[8]: ['mysql:', ',mongo:']
    10.匹配任意(非)普通字符
        元字符: \w    \W
        匹配规则: \w 匹配普通字符
                 \W 匹配非普通字符
        \w 说明:普通字符指,数字,字母,下划线,汉字
        In [10]: re.findall("\w+","addr=('127.0.0.1',11111)")
        Out[10]: ['addr', '127', '0', '0', '1', '11111']

        \W 说明:非普通字符,非数字,字母,下划线,汉字
        In [11]: re.findall("\W+","addr=('127.0.0.1',11111)")

    11.匹配任意(非)空字符
        元字符: \s     \S
        匹配规则:  \s 匹配任意空字符
                  \S 匹配任意非空字符
        说明: 空字符指, 空格 \r
        In [14]: re.findall("\w+\s+\w+","hello    world")
        Out[14]: ['hello    world']\n \t \v \f

    12.匹配字符串开头结尾位置
        元字符:   \A      \Z
        匹配规则: \A ===> ^
                 \Z ===> $
        In [17]: re.findall("^\w+$","helloworld")
        Out[17]: ['helloworld']

        In [17]: re.findall("\A\w+\Z","helloworld")
        Out[17]: ['helloworld']
        使用技巧:如果正则表达式中同时出现^ $,则两者之间的正则表达式需要将目标字符串内容全部匹配

    13.匹配单词(非)边界位置
        元字符: \b   \B
        匹配规则:\b  匹配单词边界
                \B  匹配非单词边界
        说明: 单词边界指普通字符(\w代表的字符)与其他字符的交界位置
        In [21]: re.findall(r"\bis\b","ishel is loworld")
        Out[21]: ['is']

        In [24]: re.findall(r"-?\b[1-9][0-9]*\b","age:23,score:-45,000978")
        Out[24]: ['23', '-45']

    总结:
    匹配字符:. [...] [^...] \d \D \w  \W  \s  \S
    匹配重复:*  +  ? {n}   {m,n}
    匹配位置:^ $ \A \Z \b \B
    其他:| ()  \

四.正则表达式的转义
    1.如果使用正则表达式匹配特殊字符,需要加\表示转业.
        特殊字符: . * + ? ^ $ [] {} () | \
        In [33]: re.findall(r"-?\d+\.?\d*","age:23,score:-45,000978")
        Out[33]: ['23', 45', '000978']


    2.raw字符串的使用
        raw字符串:在字符串前加r,表示该字符串为raw字符串,这样的字符串不会进行字符串转义处理
        "\\$\\d+"----> \$\d+ ---> $100
        r"\$"

五.贪婪与非贪婪
    贪婪模式: 默认情况下,匹配重复的元字符总是尽可能多的向后匹配更多的内容.比如: * + ? {m,n}

    非贪婪模式(懒惰): 让元字符尽可能少的匹配内容

    贪婪---> 非贪婪
        * -->  *?
        + -->  +?
        ? -->  ??
     {m,n}-->  {m,n}?

    贪婪:
    In [10]:  re.findall(r"(.+)","(李-白),(杜-甫),(白 居 易)")
    Out[10]: ['(李-白),(杜-甫),(白 居 易)']

    非贪婪:
    In [13]:  re.findall(r"\(.+?\)","(李-白),(杜-甫),(白 居 易)")
    Out[13]: ['(李-白)', '(杜-甫)', '(白 居 易)']

六.正则表达式分组
    1.定义:在正则表达式中,以()建立正则表达式内部分组,子组是正则表达式的一部分,
    可作为内部整体操作.
    2.作用:作为内部整体,改变元字符的操作对象
    In [18]: re.search(r"(王|李)\w{1,3}","王八").group()
    Out[18]: '王八'

    3.捕获组
        给正则表达式子组起一个名字,表达一定的意义,该组就是捕获组

        格式: (?P<name>pattern)
        In [20]: re.search(r"(?P<dog>王|李)\w{1,3}","王八").group()
        Out[20]: '王八'

    4.注意事项
        * 一个正则表达式中可以有多个分组
        * 子组可以嵌套
        * 子组顺序一般由外到内,由左到右
        ((ab)c)d(ef)

七.正则表达式匹配原则
    1.正确性,能够正确的匹配除目标字符串
    2.排他性,除了目标字符串外尽可能不配其他内容
    3.全面性,尽可能考虑到目标字符串所有情况,不遗漏

八.Python 的re模块
    regex = re.compile(pattern,flags = 0)
    功能:生成正则表达式对象
    参数:pattern正则表达式
        flags功能扩展标志位
    返回值:正则表达式对象

    list = re.findall(pattern,string,flags =0)
    功能:通过正则匹配目标字符串
    参数:pattern正则
        string 目标字符串
    返回值: 返回匹配到的内容列表,如果正则中有子组,则列表中元素为子组对应内容

    list = regex.findall(string,pos,endpos)
    功能:通过正则匹配目标字符串
    参数:string目标字符串
        pos截取目标字符串开始位置
        endpos 截取目标字符串结束位置
    返回值: 返回匹配到的内容列表,如果正则中有子组,则列表中元素为子组对应内容

    list = regex.split(pattern,string,flags =0)
    功能:通过正则匹配内容切割字符串
    参数:pattern 正则
        string  目标字符串
        endpos 截取目标字符串结束位置
    返回值: 返回切割后的内容列表.

    s = re.sub(pattern,rel,string,count,flags = 0)
    功能:使用指定字符串替换匹配到的内容
    参数:pattern  正则
        rel    指定字符串
        string 目标字符串
        count  替换多少处,默认全部替换
    返回值:返回替换后的字符串

    it = re.finditer(pattern,string,flags = 0)
    功能:通过正则匹配目标字符串
    参数:pattern  正则
        string   目标字符串
    返回值:返回匹配内容的迭代对象

    re.findmatch(pattern,string,flags = 0)
    功能:通过正则匹配目标字符串全部内容
    参数:pattern  正则
        string   目标字符串
    返回值:返回匹配内容的match对象

        re.match(pattern,string,flags = 0)
    功能:通过正则匹配目标字符串起始内容
    参数:pattern  正则
        string   目标字符串
    返回值:返回匹配内容的match对象

    regex对象属性:
        * flags: |flags标志位值
        * pattern: 正则表达式
        * groups : 子组数量
        * groupindex:捕获组与组序列号形成的字典

        In [39]: regex = re.compile(r"(ab)cd(?P<pig>ef)",flags = 1)

        In [40]: regex.flags
        Out[40]: 33

        In [41]: regex.pattern
        Out[41]: '(ab)cd(?P<pig>ef)'

        In [43]: regex.groups
        Out[43]: 2

        In [44]: regex.groupindex
        Out[44]: mappingproxy({'pig': 2})

    match对象属性方法
    1.属性变量
        pos
        endpos
        re
        string
        lastgroup
        lastindex

    2.属性方法
        start()   获取匹配内容的开始位置
        end()     获取匹配内容的结束位置
        span()    获取匹配内容的起止位置
        groupdict()  获取捕获组组名和对应内容的字典
        groups()     获取子组对应内容
        group()
        功能:获取match对象对应内容
        参数:组序号或者组名,默认得到全部匹配内容
            组序号或者组名,则得到对应组内容

作业:1.熟练掌握正则表达式元字符
    2.将re模块调用函数使用regex对象操作联系
    3.讲一个程序完成如下练习
        [1]文档中所有大写字母开头的单词

        [2]找到其中所有数字,整数,小数,正数负数,分数,百分数
        [3]将所有日期提取出来(2019-1-3),变为2019.1.3

********************************************************************************
1.什么是正则表达式
2.元字符
3.正则表达式转义,贪婪,分组
4.正则表达式匹配原则
5.re模块使用
    re调用
    regex调用
    match对象调用
********************************************************************************
一.flags参数使用
    功能:用于分丰富正则表达式的匹配
    使用函数:re模块直接调用的函数.如:re.compile(),re.findall,re.search.....
    常用flags
        A == ASCII 元字符只能匹配ascii码
        I == IGNORECASE   匹配时忽略大小写
        S == DOTALL   使.可以匹配换行
        M == MULTILINE 使^ $可匹配每一行的开头结尾
        位置
        同时使用多个flag: flags = re.I | re.A